%% ELEC5305 Mini Lab (Tempo Modulation) 

% All figures are generated by running this script once.

clear; clc; close all;

% ===================== Global Config =====================
fs   = 44100;       % Sampling rate (Hz)
dur  = 1.0;         % Duration (s)
fcar = 220;         % Carrier frequency (Hz) for tone
f_env_start = 2;    % Tempo (Hz) start  -> 120 BPM
f_env_end   = 4;    % Tempo (Hz) end    -> 240 BPM
saveFigures = false;
outdir = "results_figs";
if saveFigures && ~exist(outdir,"dir"); mkdir(outdir); end

% Ground-truth BPM curve for later metrics:
t_full = (0:1/fs:dur-1/fs).';
bpm_gt_full = linspace(60*f_env_start, 60*f_env_end, numel(t_full)).';

% Helper for saving figures
savefigx = @(name) (saveFigures && saveas(gcf, fullfile(outdir, name)));
%% 

% ===================== Part 1. Synthesize tempo-modulated signal =====================
% Tempo f_env(t) from 2 Hz to 4 Hz, used as AM envelope for a 220 Hz tone.
t = t_full;
f_env  = linspace(f_env_start, f_env_end, numel(t)).';  % Hz
phiEnv = 2*pi*cumtrapz(t, f_env);                       % Integrate to phase
env    = 0.6*(1 + 0.9*sin(phiEnv));                     % >=0 envelope
x      = env .* sin(2*pi*fcar*t);

figure('Name','Part 1: Time-domain (full)','Color','w');
plot(t, x); grid on; xlim([0 dur]);
xlabel('Time (s)'); ylabel('Amplitude');
title('Part 1 — Tempo-modulated tone (2 \rightarrow 4 Hz over 1 s)');
savefigx('P1_time_full.png');
%% 

% ===================== Part 2. Time-domain zoom & envelope =====================
% Zoom 0–0.2s to see oscillation inside the envelope.
zoom_win = t <= 0.2;
figure('Name','Part 2: Time zoom & envelope','Color','w');
subplot(2,1,1);
plot(t(zoom_win), x(zoom_win)); grid on;
xlabel('Time (s)'); ylabel('Amplitude');
title('Time zoom (0–0.2 s)');
subplot(2,1,2);
plot(t, env, 'LineWidth', 1.5); grid on; xlim([0 dur]);
xlabel('Time (s)'); ylabel('Env amplitude');
title('Designed tempo envelope 2 \rightarrow 4 Hz');
savefigx('P2_time_zoom_env.png');
%% 

% ===================== Part 3. Magnitude spectrum (FFT) =====================
Nfft = 2^nextpow2(numel(x));
X = fft(x, Nfft); f = (0:Nfft-1).'/Nfft*fs;
figure('Name','Part 3: FFT','Color','w');
plot(f(1:Nfft/2), 20*log10(abs(X(1:Nfft/2))+eps)); grid on;
xlabel('Frequency (Hz)'); ylabel('Magnitude (dB)');
title('Part 3 — Magnitude Spectrum (carrier + AM sidebands)');
savefigx('P3_fft.png');
%% 

% ===================== Part 4. STFT baseline spectrogram =====================
wlen = 256; hop = wlen/2; nfft_stft = 1024;
[S,F,T] = spectrogram(x, hamming(wlen,'periodic'), wlen-hop, nfft_stft, fs, 'yaxis');
figure('Name','Part 4: STFT baseline','Color','w');
imagesc(T, F, 20*log10(abs(S)+eps)); axis xy;
xlabel('Time (s)'); ylabel('Frequency (Hz)'); colorbar;
title('Part 4 — STFT spectrogram (wlen=256, 50% overlap)');
ylim([0 2000]);
savefigx('P4_stft_baseline.png');
%% 

% ===================== Part 5. STFT window sensitivity (Heisenberg trade-off) =====================
wLens = [128, 512, 1024];   % shorter -> better time, longer -> better freq
figure('Name','Part 5: STFT window sensitivity','Color','w');
for k = 1:numel(wLens)
    wL = wLens(k);
    [S2,F2,T2] = spectrogram(x, hamming(wL,'periodic'), floor(wL/2), 2048, fs, 'yaxis');
    subplot(1,numel(wLens),k);
    imagesc(T2, F2, 20*log10(abs(S2)+eps)); axis xy;
    xlabel('t (s)'); ylabel('f (Hz)'); title(sprintf('wlen=%d',wL));
    ylim([0 2000]);
end
sgtitle('Part 5 — STFT window length sensitivity');
savefigx('P5_stft_window_sensitivity.png');
%% 

%% ====== Part 6. Envelope extraction: Hilbert vs rect+LPF ======
env_hilb = abs(hilbert(x));     % Hilbert 
fc_lp = 8;                      % Fs Hz
[b,a] = butter(4, fc_lp/(fs/2), 'low');
env_rect = filtfilt(b, a, abs(x));  

figure('Name','Part 6: Envelope extraction compare','Color','w');
plot(t, env_hilb, 'LineWidth',1.2); hold on;
plot(t, env_rect, '--', 'LineWidth',1.2);
grid on; xlim([0 dur]);
xlabel('Time (s)'); ylabel('Envelope amplitude');
legend('Hilbert envelope','Rect+LPF envelope','Location','best');
title('Part 6 — Envelope extraction comparison');
%% 

%% ====== Part 7. Sliding Modulation Spectrum: Centroid & Bandwidth ======
% 目的：不直接找BPM主峰，而是计算"调制谱重心(Hz)与带宽(Hz)"作为节奏中心与不确定度。
% 方法：对包络做滑窗FFT，限制到 0.5–8 Hz 低频带，算谱重心SC与谱带宽BW。
% 期望：SC (×60) 随时间从 ~120 BPM 上升到 ~240 BPM；BW 表示不确定度大小。

env = env_rect;                                             % 也可换成 env_hilb
env = env(:); env = env - mean(env);
env = env / (max(abs(env))+eps);

fs_env = fs;                                             % 与原始信号相同采样率
win_ms  = 300;  hop_ms = 10;
wlen    = round(win_ms/1000*fs_env);
hop     = round(hop_ms/1000*fs_env);

                                                           % 频带限制：只看 0.5–8 Hz 的调制
fmin = 0.5; fmax = 8.0;
Nfft = 2^nextpow2(max(2048, 2*wlen));
faxis = (0:Nfft-1)'/Nfft*fs_env;
band = (faxis>=fmin & faxis<=fmax);

frames = 1:hop:(numel(env)-wlen+1);
nF = numel(frames);
SC = zeros(nF,1);   % spectral centroid (Hz)
BW = zeros(nF,1);   % spectral bandwidth (Hz)

w = hann(wlen);     % Hann

for k = 1:nF
    seg = env(frames(k):frames(k)+wlen-1) .* w;
    S = abs(fft(seg, Nfft));
    P = S.^2 + eps;              
    fb = faxis(band); Pb = P(band);

    
    Pb = Pb / sum(Pb);

    % Rao：SC=∑fPb；BW=sqrt(∑(f-SC)^2 Pb)
    sc = sum(fb .* Pb);
    bw = sqrt( sum( (fb - sc).^2 .* Pb ) );

    SC(k) = sc; BW(k) = bw;
end

t7 = (frames + (wlen/2)-1)/fs_env;

figure('Name','Part 7: Modulation Spectral Centroid & Bandwidth','Color','w');
subplot(2,1,1);
plot(t7, 60*SC, 'LineWidth',1.8); grid on; xlim([0 t7(end)]);
ylabel('Centroid (BPM)'); title('Part 7 — Modulation Spectral Centroid (×60)');
subplot(2,1,2);
plot(t7, BW, 'LineWidth',1.8); grid on; xlim([0 t7(end)]);
xlabel('Time (s)'); ylabel('Bandwidth (Hz)');
title('Part 7 — Modulation Spectral Bandwidth (uncertainty)');




%% 

%% ====== Part 8. Modulation Spectral Peak & Confidence ======
% 目的：给出"主导调制频率 f_peak(Hz)"及其置信度（峰值显著性），并转成 BPM。
% 方法：对调制谱在 1.5–5 Hz 内找最大峰；置信度=峰值 / 中位数(带内)；再轻度平滑。

f_lo = 1.5; f_hi = 5.0;                                    % 更贴近 Ground Truth 2–4 Hz
band2 = (faxis>=f_lo & faxis<=f_hi);

BPM_peak = zeros(nF,1);
CONF     = zeros(nF,1);

for k = 1:nF
    seg = env(frames(k):frames(k)+wlen-1) .* w;
    S = abs(fft(seg, Nfft));
    P = S.^2 + eps;

    fb = faxis(band2); Pb = P(band2);
    [pmax, imax] = max(Pb);
    medv = median(Pb);                            % 鲁棒底噪评估
    CONF(k) = pmax/(medv+eps);                       % 置信度: 峰/中位数（越大越稳）
    fpk = fb(imax);
    BPM_peak(k) = 60*fpk;
end

% 轻度平滑
BPM_peak_s = movmean(BPM_peak, 7);
CONF_s     = movmedian(CONF, 5);

figure('Name','Part 8: Peak BPM & Confidence','Color','w');
subplot(2,1,1);
plot(t7, BPM_peak, ':', 'LineWidth',1.2); hold on;
plot(t7, BPM_peak_s, 'LineWidth',2); grid on; xlim([0 t7(end)]);
ylabel('BPM'); title('Part 8 — Peak BPM (raw & smoothed)');
legend('Raw peak','Smoothed','Location','best');
subplot(2,1,2);
plot(t7, CONF, ':', 'LineWidth',1.2); hold on;
plot(t7, CONF_s, 'LineWidth',2); grid on; xlim([0 t7(end)]);
xlabel('Time (s)'); ylabel('Confidence (peak/median)');
title('Part 8 — Confidence of peak (higher = more reliable)');

% A simple assessment with GT (for the peak curve)
BPM_gt = linspace(120, 240, numel(t7))';
rmse_peak = sqrt(mean((BPM_peak_s - BPM_gt).^2));
bias_peak = mean(BPM_peak_s - BPM_gt);
fprintf('[Part 8] Peak-BPM vs GT: RMSE=%.2f  Bias=%.2f\n', rmse_peak, bias_peak);


%% ====== Part 9. Modulation Energy Ratio & Tempo Growth Rate ======
% 目的：给出更"全局"的、对噪声不敏感的两个指标：
%  (1) MER(2–4Hz / 0.5–8Hz)：节奏能量占比，越高说明节拍越突出
%  (2) Growth rate：Centroid(BPM) 的时间导数 (BPM/s)，反映节奏上升速度

band_all = (faxis>=0.5 & faxis<=8.0);
band_tempo = (faxis>=2.0 & faxis<=4.0);

MER = zeros(nF,1);
for k = 1:nF
    seg = env(frames(k):frames(k)+wlen-1) .* w;
    P = abs(fft(seg, Nfft)).^2;
    MER(k) = (sum(P(band_tempo))+eps) / (sum(P(band_all))+eps);
end

% Growth rate
BPM_centroid = 60*SC;
dt = hop/fs_env;
growth = [0; diff(BPM_centroid)/dt];  % BPM/s


MER_s = movmean(MER, 7);
growth_s = movmean(growth, 7);

figure('Name','Part 9: MER & Growth rate','Color','w');
subplot(2,1,1);
plot(t7, MER_s, 'LineWidth',2); grid on; xlim([0 t7(end)]);
ylim([0 1]); ylabel('MER (2–4Hz / 0.5–8Hz)');
title('Part 9 — Modulation Energy Ratio (higher = clearer tempo)');
subplot(2,1,2);
plot(t7, growth_s, 'LineWidth',2); grid on; xlim([0 t7(end)]);
xlabel('Time (s)'); ylabel('d(BPM)/dt  (BPM/s)');
title('Part 9 — Tempo growth rate from centroid');

% Correlation with GT
rho_centroid = corr(BPM_centroid(:), BPM_gt(:));
fprintf('[Part 9] Corr(centroid BPM, GT) = %.3f\n', rho_centroid);



%% 

% ===================== Local functions =====================
function xN = add_awgn(x, SNRdB)
%ADD_AWGN add white Gaussian noise with target SNR (dB), no toolbox needed.
    x = x(:);
    Psig = mean(x.^2);
    Pn   = Psig / (10^(SNRdB/10));
    n    = sqrt(Pn)*randn(size(x));
    xN   = x + n;
end
